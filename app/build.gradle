import br.com.gabrielferreira.baseclean.buildconfig.buildtype.BuildTypeConfig
import br.com.gabrielferreira.baseclean.buildconfig.buildtype.DebugBuildTypeConfig
import br.com.gabrielferreira.baseclean.buildconfig.buildtype.ReleaseBuildTypeConfig
import br.com.gabrielferreira.baseclean.buildconfig.productflavor.DevelopmentEnvironmentProductFlavor
import br.com.gabrielferreira.baseclean.buildconfig.productflavor.MinSdk21ProductFlavor
import br.com.gabrielferreira.baseclean.buildconfig.productflavor.ProductFlavorConfig
import br.com.gabrielferreira.baseclean.buildconfig.productflavor.ProductionEnvironmentProductFlavor
import com.android.build.gradle.internal.dsl.BaseFlavor

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "br.com.gabrielferreira.baseclean"
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        minSdkVersion 21
    }
    buildTypes {
        debug {
            buildType ->
                ext.enableCrashlytics = false
                setupBuildTypeConfig buildType, new DebugBuildTypeConfig()
//                signingConfig signingConfigs.debug
        }
        release {
            buildType ->
                setupBuildTypeConfig buildType, new ReleaseBuildTypeConfig()
//                signingConfig signingConfigs.release
        }
    }

    flavorDimensions "minSdkVersion", "environment"

    productFlavors {
        minSdk21 { flavor ->
            dimension "minSdkVersion"
            setupProductFlavorConfig flavor, new MinSdk21ProductFlavor(), rootProject
        }

        development { flavor ->
            dimension "environment"
            setupProductFlavorConfig flavor, new DevelopmentEnvironmentProductFlavor(), rootProject
        }

        production { flavor ->
            dimension "environment"
            setupProductFlavorConfig flavor, new ProductionEnvironmentProductFlavor(), rootProject
        }
    }

    lintOptions {
        disable 'NeedOnRequestPermissionsResult'
    }
}

dependencies {
    // Local files
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    // Support Library
    implementation "com.android.support:appcompat-v7:$rootProject.ext.supportLibraryVersion"
    implementation "com.android.support:support-v4:$rootProject.ext.supportLibraryVersion"
    implementation "com.android.support:support-media-compat:$rootProject.ext.supportLibraryVersion"
    implementation("com.android.support:design:$rootProject.ext.supportLibraryVersion") {
        exclude module: 'support-v4'
    }

    // Retrofit and OkHttp
    def retrofitVersion = "2.3.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.1'


    // Dagger
    def dagger2Version = "2.14.1"
    implementation "com.google.dagger:dagger:$dagger2Version"
    kapt "com.google.dagger:dagger-compiler:$dagger2Version"

    // RxJava
    implementation 'io.reactivex.rxjava2:rxjava:2.1.8'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.6.1'

    // Gson
    implementation 'com.google.code.gson:gson:2.8.2'

    // Permission Dispatcher
    def permissionDispatcherVersion = "3.1.0"
    implementation("com.github.hotchemi:permissionsdispatcher:${permissionDispatcherVersion}") {
        // if you don't use android.app.Fragment you can exclude support for them
        exclude module: "support-v13"
    }
    kapt "com.github.hotchemi:permissionsdispatcher-processor:${permissionDispatcherVersion}"

    //Fabric
    implementation('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true
        exclude group: "com.android.support", module: "support-annotations"
    }

    // Rounded ImageView
    implementation 'com.makeramen:roundedimageview:2.3.0'
}

static void setupBuildTypeConfig(com.android.build.gradle.internal.dsl.BuildType buildType, BuildTypeConfig buildTypeConfig) {
    buildType.minifyEnabled buildTypeConfig.isMinifyEnabled()
    buildType.shrinkResources buildTypeConfig.isShrinkResourcesEnabled()
    buildTypeConfig.proguardFiles.each { file -> buildType.proguardFile(file) }
}

@SuppressWarnings("GroovyUnusedAssignment")
static void setupProductFlavorConfig(BaseFlavor flavor, ProductFlavorConfig config, Project project) {
    def TYPE_BOOLEAN = "boolean"
    def TYPE_BOOLEAN_TRUE = "true"
    def IS_OK_HTTP_LOG_ENABLED = "IS_OK_HTTP_LOG_ENABLED"
    def IS_EVENT_LOG_ENABLED = "IS_EVENT_LOG_ENABLED"

    project.ext.enableCrashlytics = config.isFabricEnable()

    flavor.minSdkVersion = config.getMinSdkVersion()
    flavor.buildConfigField(TYPE_BOOLEAN, IS_OK_HTTP_LOG_ENABLED, config?.isOkHttpLogEnabled() ?: TYPE_BOOLEAN_TRUE)
    flavor.buildConfigField(TYPE_BOOLEAN, IS_EVENT_LOG_ENABLED, config?.isEventLogEnabled() ?: TYPE_BOOLEAN_TRUE)
}

tasks.whenTaskAdded { task ->
    if (detektCheckTaskShouldRunBeforeTask(task.name)) {
        task.dependsOn rootProject.getTasksByName("detektCheck", false).first()
    }
}

boolean detektCheckTaskShouldRunBeforeTask(final String taskName) {
    boolean propertyExists = hasProperty("detektCheckBeforeBuildEnabled")
    final boolean shouldRunDetektCheckBeforeBuild = propertyExists ? this.detektCheckBeforeBuildEnabled.toBoolean() : true
    return shouldRunDetektCheckBeforeBuild && taskName.startsWith("assemble")
}
