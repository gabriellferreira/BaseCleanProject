import java.text.SimpleDateFormat

buildscript {
    ext.kotlin_version = '1.3.61'
    ext.detektVersion = "1.0.0.RC8"

    repositories {
        google()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektVersion"
    }
}

plugins {
    id "nebula.lint" version "9.3.1"
}

gradleLint {
    rules = ['dependency-parentheses', 'duplicate-dependency-class', 'unused-exclude-by-dep', 'unused-exclude-by-conf']
    criticalRules = ['unused-dependency']
    // <-- this will fail the build in the event of a violation
}

apply plugin: "io.gitlab.arturbosch.detekt"

detekt {
    version = detektVersion
    profile("main") {
        input = "$projectDir/app"
        config = "$projectDir/detekt-config.yml"
        filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
        parallel = true
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
    apply plugin: 'nebula.lint'
}

ext {
    compileSdkVersion = 29
    targetSdkVersion = 29
    buildToolsVersion = "29.0.0"
    minSdkVersion = 23

    versionCode = computeVersionCode()
    versionName = computeVersionName()
    changeLog = getChangelog()
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def getChangelog() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "git", "--no-pager", "log", "--pretty=format:'%s (%an)'", "--since='1 week ago'", "--no-merges"
        standardOutput = stdout
    }
    return stdout.toString().replace("'", "")
}

static def computeVersionCode() {
    def name = "${'git describe --abbrev=0'.execute().text.trim()}"
    if (name == "") name = "1"
    name.toInteger()
}

// Version name in the form: 2018.02.01-1162a97
static def computeVersionName() {
    def name = "${now('yyyy.MM.dd')}-${'git rev-parse --short HEAD'.execute().text.trim()}"
    def prRef = getPrRef()
    if (prRef) {
        name = "$name@$prRef"
    }
    name
}

static def now(formatString) {
    new SimpleDateFormat(formatString).format new Date()
}

static def getPrRef() {
    def head = 'git rev-parse --short HEAD'.execute().text.trim()
    def ref = "git branch -r --contains $head".execute().text.trim()
    def m = ref.trim() =~ /origin\/pr\/(\d+)\/merge/
    if (m) {
        "pr-${m[0][1]}"
    } else {
        // Not building a PR, nothing to return
        null
    }
}